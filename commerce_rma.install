<?php

/**
 * @file
 * Contains install and update functions for RMA.
 */

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Session\AccountInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * Implements hook_install().
 */
function commerce_rma_install() {
  // Allow authenticated users to manage own payment methods.
  user_role_grant_permissions(AccountInterface::AUTHENTICATED_ROLE, ['add commerce return entities']);
  user_role_grant_permissions(AccountInterface::AUTHENTICATED_ROLE, ['use commerce_return default cancel transition']);
  user_role_grant_permissions(AccountInterface::AUTHENTICATED_ROLE, ['return order']);
}

/**
 * Recreate Total returned price (Confirmed) field.
 */
function commerce_rma_update_8714() {
  $field_storage_definition = BaseFieldDefinition::create('commerce_price')
    ->setLabel(t('Total returned price (Confirmed)'))
    ->setDescription(t('The returned total price (Value which should be returned to user). Manager can modify this value if manual return is in use.'))
    ->setReadOnly(TRUE)
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('confirmed_total_price', 'commerce_return', 'commerce_rma', $field_storage_definition);
}

/**
 * Recreate Expected resolution field.
 */
function commerce_rma_update_8716() {
  $field_storage_definition = BaseFieldDefinition::create('entity_reference')
    ->setLabel(t('Expected resolution'))
    ->setDescription(t('The expected resolution of item return.'))
    ->setRequired(TRUE)
    ->setSetting('target_type', 'commerce_return_reason')
    ->setSetting('handler', 'default')
    ->setCardinality(1)
    ->setReadOnly(TRUE)
    ->setDisplayOptions('form', [
      'type' => 'entity_reference_autocomplete',
      'weight' => -1,
      'settings' => [
        'match_operator' => 'CONTAINS',
        'size' => '60',
        'placeholder' => '',
      ],
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('expected_resolution', 'commerce_return_item', 'commerce_rma', $field_storage_definition);
}


