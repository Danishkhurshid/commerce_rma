<?php

use Drupal\Core\Field\BaseFieldDefinition;

/**
 * Add order back reference field.
 */
function commerce_rma_update_8701() {
  $field_storage_definition = BaseFieldDefinition::create('entity_reference')
    ->setLabel(t('Order'))
    ->setDescription(t('The parent order.'))
    ->setSetting('target_type', 'commerce_order')
    ->setRequired(TRUE)
    ->setReadOnly(TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('order_id', 'commerce_return', 'commerce_rma', $field_storage_definition);
}

/**
 * Recreate RMA Billing information field.
 */
function commerce_rma_update_8703() {
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  if ($billing_profile = $definition_update_manager->getFieldStorageDefinition('billing_profile', 'commerce_return')) {
    $definition_update_manager->uninstallFieldStorageDefinition($billing_profile);
  }

//  $field_storage_definition = BaseFieldDefinition::create('entity_reference_revisions')
//    ->setLabel(t('Billing information'))
//    ->setDescription(t('Billing profile'))
//    ->setSetting('target_type', 'profile')
//    ->setSetting('handler', 'default')
//    ->setSetting('handler_settings', ['target_bundles' => ['customer']])
//    ->setTranslatable(TRUE)
//    ->setDisplayOptions('form', [
//      'type' => 'commerce_billing_profile',
//      'weight' => 0,
//      'settings' => [],
//    ])
//    ->setDisplayConfigurable('form', TRUE)
//    ->setDisplayConfigurable('view', TRUE);
//
//  \Drupal::entityDefinitionUpdateManager()
//    ->installFieldStorageDefinition('billing_profile', 'commerce_return', 'commerce_rma', $field_storage_definition);
}

/**
 * Recreate RMA Billing information field.
 */
function commerce_rma_update_8704() {
  $field_storage_definition = BaseFieldDefinition::create('commerce_price')
  ->setLabel(t('Total return amount'))
  ->setDescription(t('The return total amount (Value which should be returned to user). Manager can modify this value if manual return is in use.'))
  ->setReadOnly(TRUE)
  ->setDisplayConfigurable('form', TRUE)
  ->setDisplayConfigurable('view', TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('total_amount', 'commerce_return', 'commerce_rma', $field_storage_definition);
}

/**
 * Create RMA confirmed_total_amount field.
 */
function commerce_rma_update_8705() {
  $field_storage_definition = BaseFieldDefinition::create('commerce_price')
    ->setLabel(t('Total returned amount'))
    ->setDescription(t('The returned total amount (Value which should be returned to user). Manager can modify this value if manual return is in use.'))
    ->setReadOnly(TRUE)
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('confirmed_total_amount', 'commerce_return', 'commerce_rma', $field_storage_definition);
}

/**
 * Create RMA items fields.
 */
function commerce_rma_update_8706() {
  $field_storage_definition = BaseFieldDefinition::create('commerce_price')
  ->setLabel(t('Confirmed Amount'))
  ->setDescription(t('The amount for return (confirmed).'))
  ->setReadOnly(TRUE)
  ->setDisplayConfigurable('form', TRUE)
  ->setDisplayConfigurable('view', TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('confirmed_amount', 'commerce_return_item', 'commerce_rma', $field_storage_definition);


  $field_storage_definition = BaseFieldDefinition::create('integer')
  ->setLabel(t('ConfirmedQuantity'))
  ->setDescription(t('The quantity for return (confirmed).'))
  ->setReadOnly(TRUE)
  ->setDisplayConfigurable('form', TRUE)
  ->setDisplayConfigurable('view', TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('confirmed_quantity', 'commerce_return_item', 'commerce_rma', $field_storage_definition);

  $field_storage_definition = BaseFieldDefinition::create('string_long')
  ->setLabel(t("Manager's note"))
  ->setRequired(TRUE)
  ->setDisplayOptions('form', [
    'type' => 'string_textarea',
    'weight' => 0,
    'settings' => [
      'rows' => 12,
    ],
  ])
  ->setDisplayConfigurable('form', TRUE)
  ->setDisplayOptions('view', [
    'type' => 'string',
    'weight' => 0,
    'label' => 'above',
  ])
  ->setDisplayConfigurable('view', TRUE);

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('manager_note', 'commerce_return_item', 'commerce_rma', $field_storage_definition);


}

function commerce_rma_update_8713() {
  function example_update_8701() {
    $entity_update_manager = \Drupal::entityDefinitionUpdateManager();
    $entity_type = $entity_update_manager->getEntityType('commerce_return_item');
    $entity_update_manager->uninstallEntityType($entity_type);
  }
//  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();
//  if ($reason = $definition_update_manager->getFieldStorageDefinition('reason', 'commerce_return_reason')) {
//    $definition_update_manager->uninstallFieldStorageDefinition($reason);
//  }
//  db_drop_field('commerce_return_item_field_data', 'reason');
//  $fieldSpec = [
//    'type' => 'varchar',
//    'length' => 255,
//    'not null' => TRUE,
//    'description' => 'Hash of source row data, for detecting changes',
//  ];
//  db_add_field('commerce_return_item_field_data', 'reason', $fieldSpec);

//
//  $field_storage_definition = BaseFieldDefinition::create('entity_reference')
//    ->setLabel(t('Reason'))
//    ->setDescription(t('The reason of item return.'))
//    ->setRequired(TRUE)
//    ->setTargetEntityTypeId('commerce_return_reason')
//    ->setDisplayOptions('form', [
//      'type' => 'entity_reference_autocomplete',
//      'weight' => -1,
//      'settings' => [
//        'match_operator' => 'CONTAINS',
//        'size' => '60',
//        'placeholder' => '',
//      ],
//    ])
//    ->setDisplayConfigurable('form', TRUE)
//    ->setDisplayConfigurable('view', TRUE);
//
//
//  \Drupal::entityDefinitionUpdateManager()
//    ->installFieldStorageDefinition('reason', 'commerce_return_item', 'commerce_rma', $field_storage_definition);
}